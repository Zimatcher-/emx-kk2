# --------------------------------------------------------------------------
#                                  The "EMX"
#                          Embedded Mutable eXecutive
#                                  Framework
# 
#                   Copyright (C) 2014 Edgar (emax) Hermanns 
# --------------------------------------------------------------------------
# 
#  my $email = sprintf ("%s@%s.%s", "emax", "hermanns", "net");
# 
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

# 
# @file           avr-make_lib.rules
# @brief          Embedded Mutable eXecutive component
# @author         Edgar (emax) Hermanns
# @date           20140227
# @version        $Id$

# CHANGE LOG:
# ##  who  yyyymmdd   bug#  description
# --  ---  --------  -----  -------------------------------------------------
#  1  ...  ........  .....  ........
#  0  emx  20140227  -----  initial version
# 
# Hey Emacs, this is a -*- makefile -*-

# AVR-GCC Makefile template for libraries, derived 
# from the WinAVR template (which is public domain)
#
#----------------------------------------
# parameters to set in project:
#----------------------------------------
# SRC:                  list of c-sources 
# ASRC:                 list of assembler sources
# TARGET:               target library name without prefix and extensions, i.e.: Mylib instead of libMylib.a
# TARGETDIR:            directory where the library shall reside, relative to the sources, e.g.: ../lib
#----------------------------------------
# parameters to set here:
#----------------------------------------
# CSTANDARD:            set the C Standard level.
#                       c89   - "ANSI" C
#                       gnu89 - c89 plus GCC extensions
#                       c99   - ISO C99 standard (not yet fully implemented)
#                       gnu99 - c99 plus GCC extensions
# CDEFS:                -D options. additional DEFS parameter from project will be appended
# CINCS:                -I options. additional INCLUDE parameter from project will be appended
# CWARN:                compiler warning flags
# CTUNING:              compiler tuning options
# CEXTRA:               to be documented, currently unused
# CFLAGS:               all compiler flags concatenated 
# ASFLAGS:              assembler flags
#----------------------------------------
# Name of the Makefile (used for "make depend" in project-makefile).
#----------------------------------------
MAKEFILE            = Makefile
CC                  = avr-gcc
OBJCOPY             = avr-objcopy
OBJDUMP             = avr-objdump
SIZE                = avr-size
NM                  = avr-nm
REMOVE              = rm -f
MV                  = mv -f
OBJ                 = $(SRC:.c=.o) $(ASRC:.S=.o) 
CSTANDARD           = -std=c99
CDEFS               = -DF_CPU=$(F_CPU)UL
CDEFS              += $(DEFS)
CINCS               = 
CINCS              += $(INCLUDE)
CWARN               = -Wall -Wstrict-prototypes
CTUNING             = -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
#CEXTRA             = -Wa,-adhlns=$(<:.c=.lst)
CFLAGS              = $(CDEBUG) $(CDEFS) $(CINCS) -O$(OPT) $(CWARN) $(CSTANDARD) $(CEXTRA)
CFLAGS             += $(CTUNING)
CFLAGS             += $(EXTRACFLAGS)
ASFLAGS             = -Wa,-adhlns=$(<:.S=.lst),-gstabs 

#----------------------------------------
# Define all listing files.
#----------------------------------------
LST                    = $(ASRC:.S=.lst) $(SRC:.c=.lst)

#----------------------------------------
# Combine all necessary flags and optional flags.
# Add target processor to flags.
#----------------------------------------
ALL_CFLAGS             = -mmcu=$(MCU) -I. $(CFLAGS)
ALL_ASFLAGS            = -mmcu=$(MCU) -I. -x assembler-with-cpp $(ASFLAGS)


# Compile: create object files from C source files.
.c.o:
	$(CC) -c $(ALL_CFLAGS) $< -o $@ 

#----------------------------------------
# Compile: create assembler files from C source files.
#----------------------------------------
.c.s:
	$(CC) -S $(ALL_CFLAGS) $< -o $@

#----------------------------------------
# Assemble: create object files from assembler source files.
#----------------------------------------
.S.o:
	$(CC) -c $(ALL_ASFLAGS) $< -o $@


#----------------------------------------
# Default target.
#----------------------------------------
all: tags lib

tags: TAGS_$(TARGET)

lib: $(TARGETDIR)/lib$(TARGET).a

TAGS_$(TARGET): $(SRC)
	etags $(SRC) -o TAGS_$(TARGET)

$(TARGETDIR)/lib$(TARGET).a:   $(OBJ)
	@for i in $? ;\
        do \
           $(AR) -vr $@ $$i ; \
        done

clean:
	$(REMOVE) $(TARGETDIR)/lib$(TARGET).a \
	$(OBJ) $(SRC:.c=.s) $(SRC:.c=.i) $(SRC:.c=.d) TAGS_$(TARGET)


.PHONY:	all tags lib clean
